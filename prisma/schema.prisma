generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id           String        @id @default(uuid())
  firstname    String
  lastname     String
  email        String        @unique
  password     String
  phone        String?
  role         Role          @relation(fields: [roleId], references: [id])
  roleId       String
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  appointments Appointment[]
  sentMessages Contact[]
  isAdmin      Boolean       @default(false)
}

model Product {
  id          String    @id @unique @default(uuid())
  brand       String
  name        String
  description String
  price       Float
  image       String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  admin       User      @relation(fields: [adminId], references: [id])
  adminId     String
}

model Category {
  id          String    @id @unique @default(uuid())
  name        String
  description String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  services    Service[]
}

model Service {
  id          String    @id @unique @default(uuid())
  name        String
  description String
  price       Float
  duration    Int
  image       String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  category    Category  @relation(fields: [categoryId], references: [id])
  categoryId  String
  admin       User      @relation(fields: [adminId], references: [id])
  adminId     String
}

model Appointment {
  id        String   @id @unique @default(uuid())
  name      String
  email     String   @unique
  password  String
  phone     String
  date      DateTime @default(now())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(name: "user_appointments", fields: [userId], references: [id])
  userId    String
  admin     User     @relation(name: "admin_appointments", fields: [adminId], references: [id])
  adminId   String
}

model Contact {
  id        String   @id @unique @default(uuid())
  name      String
  email     String
  message   String
  sentAt    DateTime @default(now())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(name: "user_messages", fields: [userId], references: [id])
  userId    String?
  admin     User     @relation(name: "admin_messages", fields: [adminId], references: [id])
  adminId   String
}

model Role {
  id        String    @id @unique @default(uuid())
  name      RoleName  @unique @default(USER)
  users     User[]
  read      Boolean   @default(true)
  write     Boolean   @default(false)
  update    Boolean   @default(false)
  apply     Boolean   @default(false)
  delete    Boolean   @default(false)
  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
}

enum RoleName {
  USER
  ADMIN
}


