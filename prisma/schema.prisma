// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id        String       @id @default(uuid())
  firstname String
  lastname  String
  email     String      @unique
  password  String
  phone     String?
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  appointments Appointment[]
  sentMessages Contact[]
}

model Product {
  id        String    @id @unique @default(uuid())
  brand     String
  name      String
  description String
  price     Float
  image     String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  admin     Admin     @relation(fields: [adminId], references: [id])
  adminId   String
}

model Category {
  id          String    @id @unique @default(uuid())
  name        String
  description String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  services    Service[]
}

model Service {
  id          String    @id @unique @default(uuid())
  name        String
  description String
  price       Float
  duration    Int
  image       String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  category    Category  @relation(fields: [categoryId], references: [id])
  categoryId  String
  admin       Admin     @relation(fields: [adminId], references: [id])
  adminId     String
}

model Appointment {
  id        String    @id @unique @default(uuid())
  name      String
  email     String    @unique
  password  String
  phone     String
  date      DateTime  @default(now())
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  user      User?     @relation(fields: [userId], references: [id])
  userId    String
  admin     Admin     @relation(fields: [adminId], references: [id])
  adminId   String
}

model Contact {
  id         String    @id @unique @default(uuid())
  name       String
  email      String
  message    String
  sentAt     DateTime  @default(now())
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  user      User?     @relation(fields: [userId], references: [id])
  userId    String?
  admin     Admin     @relation(fields: [adminId], references: [id])
  adminId   String
}

model Role {
  id        String     @id @unique @default(uuid())
  name      RoleName  @unique @default(USER)
  admins    Admin[]   @relation(fields: [roleId], references: [id])
  users     User[]    @relation(fields: [roleId], references: [id])
  read      Boolean   @default(true)
  write     Boolean   @default(false)
  update    Boolean   @default(false)
  apply     Boolean   @default(false)
  delete    Boolean   @default(false)
  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
}

model Admin {
  id        String    @id @unique @default(uuid())
  firstname String
  lastname  String
  phone     String
  email     String    @unique
  password  String
  products  Product[]
  services  Service[]
  contacts  Contact[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  role      Role?     @relation(fields: [roleId], references: [id])
  roleId    String
  apointment Appointment[]
}


enum RoleName {
  USER
  ADMIN
}





